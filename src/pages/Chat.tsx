import React, { useState, useEffect, useRef } from 'react';
import { Button, TextField, Container, ListItem, ListItemText, Box, Typography } from '@mui/material';
import Navbar from '../components/Navbar';
import io from 'socket.io-client';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket (–∑–∞–º–µ–Ω–∏ URL –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä)
const socket = io('http://localhost:4000');

interface Message {
  text: string;
  sender: 'client' | 'server'; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä)
}

const Chat: React.FC = () => {
  const [message, setMessage] = useState(''); // –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const [messages, setMessages] = useState<Message[]>([]); // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  const chatEndRef = useRef<HTMLDivElement | null>(null); // –î–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    socket.on('message', (msg: string) => {
      setMessages((prevMessages) => [...prevMessages, { text: msg, sender: 'server' }]);
    });

    return () => {
      socket.off('message'); // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
  }, []);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSend = () => {
    if (message.trim()) {
      socket.emit('message', message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      setMessages((prevMessages) => [...prevMessages, { text: message, sender: 'client' }]); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
      setMessage(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Enter
  const handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
      handleSend(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    }
  };

  return (
    <>
      <Navbar title="Chat" setIsAuthenticated={setIsAuthenticated} />
      <Container
        maxWidth="sm"
        sx={{
          display: 'flex',
          flexDirection: 'column',
          height: '100vh',
          paddingTop: '64px',
        }}
      >
        {/* –û–±–ª–∞—Å—Ç—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <Box
          sx={{
            flexGrow: 1,
            overflowY: 'auto',
            padding: '10px',
            display: 'flex',
            flexDirection: 'column',
            gap: '10px',
            border: '1px solid #ddd',
            borderRadius: '8px',
            marginTop: '10px',
            marginBottom: '10px',
          }}
        >
          {messages.map((msg, index) => (
            <ListItem
              key={index}
              sx={{
                display: 'flex',
                justifyContent: msg.sender === 'client' ? 'flex-end' : 'flex-start',
              }}
            >
              <Box
                sx={{
                  backgroundColor: msg.sender === 'client' ? '#1976d2' : '#e0e0e0',
                  color: msg.sender === 'client' ? '#fff' : '#000',
                  borderRadius: '10px',
                  padding: '10px 15px',
                  maxWidth: '60%',
                  wordWrap: 'break-word',
                  whiteSpace: 'pre-wrap',
                  position: 'relative',
                }}
              >
                <ListItemText primary={msg.text} />
                {/* –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                <Box
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: msg.sender === 'client' ? 'flex-end' : 'flex-start',
                    marginTop: '5px',
                  }}
                >
                  {msg.sender === 'client' ? (
                    <>
                      <Typography variant="caption" color="inherit">
                        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                      </Typography>
                      <span role="img" aria-label="user" style={{ fontSize: '24px', marginLeft: '5px' }}>
                        üòÄ
                      </span>
                    </>
                  ) : (
                    <>
                      <Typography variant="caption" color="inherit">
                        –°–µ—Ä–≤–µ—Ä
                      </Typography>
                      <span role="img" aria-label="robot" style={{ fontSize: '24px', marginLeft: '5px' }}>
                        ü§ñ
                      </span>
                    </>
                  )}
                </Box>
              </Box>
            </ListItem>
          ))}
          <div ref={chatEndRef} />
        </Box>

        {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <Box
          sx={{
            borderTop: '1px solid #ddd',
            padding: '10px 0',
            backgroundColor: '#f4f6f8', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ñ–æ–Ω
            position: 'sticky',
            bottom: 0,
            width: '100%',
          }}
        >
          <TextField
            fullWidth
            label="Type your message"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={handleKeyPress} // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Enter
            sx={{
              marginBottom: '10px',
              backgroundColor: '#fff', // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
              borderRadius: '4px',
            }}
          />
          <Button
            variant="contained"
            color="primary"
            onClick={handleSend}
            fullWidth
            sx={{
              backgroundColor: '#1976d2', // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
              '&:hover': {
                backgroundColor: '#115293', // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
              },
            }}
          >
            Send
          </Button>
        </Box>
      </Container>
    </> 
  );
};

export default Chat;
